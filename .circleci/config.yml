# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/blogsite
    docker:
      # Specify the version you desire here
      # https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/php:7.4-node-browsers
        environment:
          APP_ENV: prod
          DATABASE_URL: mysql://root:@127.0.0.1:3306/blog-site
          MAILER_DSN: smtp://a698ae32578dd0:dc0de1cafa08e7@smtp.mailtrap.io:2525?encryption=tls&auth_mode=login
          MAILER_FROM: blog@blogsite.com
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: blog-site
    steps:
      - checkout
      - run:
          name: Install apt
          command: sudo apt-get install -y zlib1g-dev
      - run:
          name: Install PHP MySQL
          command: sudo docker-php-ext-install pdo_mysql zip
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          name: Composer
          command: sudo composer self-update
      - run:
          name: Composer install
          command: composer install -n --prefer-dist
      - run:
          name: Run migrations
          command: php bin/console doctrine:migration:migrate --env=test --no-interaction
      - run:
          name: Run tests
          command: ./vendor/bin/simple-phpunit
  deploy:
    working_directory: ~/blogsite
    docker:
      - image: circleci/php:7.4-node-browsers
    steps:
      - checkout
      - run:
          name: Composer install
          command: composer install -n --prefer-dist
      - run:
          name: Clear cache
          command: php bin/console cache:clear --env=prod --no-interaction
      - run:
          name: Cache warmup
          command: php bin/console cache:warmup --env=prod --no-interaction
      - run:
          name: Yarn
          command: yarn install && yarn run encore production
      - run:
          name: Add droplet
          command: ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
      - run:
          name: Pre-deploy
          command: ssh -T $DROPLET_USER:$DROPLET_IP < bin/deploy/pre_deploy.sh
      - run:
          name: Deploy code
          command: rsync -vzcrSLhp --exclude '.env' --delete ~/blogsite/ $DROPLET_USER:$DROPLET_IP:/var/www/blogsite_current
      - run:
          name: Post deploy
          command: ssh -T $DROPLET_USER:$DROPLET_IP < bin/deploy/pre_deploy.sh
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
#          filters:
#            branches:
#              only: master